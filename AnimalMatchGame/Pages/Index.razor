@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }
    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>
<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAlnimals.Count; animalNumber++)
            {
                var animal = shuffledAlnimals[animalNumber];
                <div class="col-3">
                    <button @onclick="@(() => ButtonClick(animal))"
                            type="button" class="btn btn-outline-dark">
                        <h1>@animal</h1>
                    </button>
                </div>
            }
    </div>
    <div class="row">
        <h2>Matched found: @matchesFound</h2>
    </div>
    <div>
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    List<string> animalEmojis = new List<string>()
    {
        "🐶", "🐶", "🐝", "🐝",
        "🐹", "🐹", "🐰", "🐰",
        "🦋", "🦋", "🐸", "🐸",
        "🦄", "🦄", "🪼", "🪼"
    };

    List<string> shuffledAlnimals = new List<string>();
    int matchesFound = 0;
    Timer? timer;
    int tenthsOfSecondsElapsed = 0;
    string? timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAlnimals = animalEmojis
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    private void ButtonClick(string animal)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            timer.Start();
        }
        else if ((lastAnimalFound == animal))
        {
            lastAnimalFound = string.Empty;
            shuffledAlnimals = shuffledAlnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;

            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += "-Play Again?";

                SetUpGame();
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }
}
